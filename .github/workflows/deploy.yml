name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/binance-proxy:latest
        
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.AWS_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Add host to known_hosts
      run: ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create .env file
      run: |
        cat > .env.production << EOL
        # Security
        JWT_SECRET=yash

        # Logging
        LOG_LEVEL=info

        # Rate limiting
        RATE_LIMIT_WINDOW=60000
        RATE_LIMIT_MAX_REQUESTS=100

        # Optional whitelist for allowed frontend origins
        ALLOWED_ORIGINS=https://ai-trading-three.vercel.app

        # Server configuration
        PORT=3000
        NODE_ENV=production

        # Security
        API_SECRET=3205bd9c55cf46effe51835123d875a22b82f5e2ca85842500aed88d65692b20

        # Timeouts
        REQUEST_TIMEOUT=15000
        EOL
    
    - name: Copy .env file to server
      run: scp .env.production ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/binance-proxy.env
        
    - name: Deploy to AWS
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} << 'EOF'
          # Stop and remove existing container if it exists
          docker stop binance-proxy || true
          docker rm binance-proxy || true
          
          # Pull the latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/binance-proxy:latest
          
          # Create logs directory if it doesn't exist
          mkdir -p ~/logs
          
          # Run the new container with environment variables
          docker run -d \
            --name binance-proxy \
            -p 3000:3000 \
            -v ~/logs:/app/logs \
            --env-file ~/binance-proxy.env \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/binance-proxy:latest
          
          # Print container logs
          echo "Container logs:"
          sleep 5  # Wait for container to start
          docker logs binance-proxy
          
          # Check if container is running
          echo "Container status:"
          docker ps | grep binance-proxy
        EOF